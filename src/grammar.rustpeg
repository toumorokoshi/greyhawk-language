use super::ast;
use super::ast::{BinOp, BinaryOperator};

spaces -> usize = s:" "+ { s.len() }
spaces_or_newline -> usize = s:[ \n]* { s.len() }
newline -> bool = [\n]+ { true }

#[pub]
symbol -> String = [a-zA-Z_][a-zA-Z0-9_]* { match_str.to_string() }

#[pub]
type_symbol -> String = [A-Z][a-zA-Z0-9]* { match_str.to_string() }

string_body -> String = [^"]+ { match_str.to_string() }

#[pub]
constant_string -> String = "\"" s:string_body "\"" { s }

#[pub]
integer -> i64 = [0-9]+ { match_str.parse().unwrap() }

#[pub]
float -> f64 = [0-9]+ "." [0-9]+ { match_str.parse().unwrap() }

#[pub]
declare -> ast::Declaration = s:symbol spaces ":=" spaces e:expression
                              { ast::Declaration{name: s, expression: Box::new(e)} }

#[pub]
return_statement -> ast::Statement = "return" spaces e:expression
                 { ast::Statement::Return(e) }

#[pub]
function -> ast::FunctionDecl =
         typ:type_symbol spaces name:symbol "(" spaces? ")" spaces? "{" spaces_or_newline statements:statement_list spaces_or_newline? "}"
         { ast::FunctionDecl{typ: typ, name: name, statements:statements} }

#[pub]
call -> ast::Expression =
       s:symbol "(" e:expression ")" { ast::Expression::Call{name: s, arg: Box::new(e)} }
     / s:symbol "(" ")" { ast::Expression::Call{name: s, arg: Box::new(ast::Expression::ConstInt{value: 0})} }

#[pub]
base_types -> ast::Expression =
             s:constant_string { ast::Expression::ConstString{value: s} }
           / f:float { ast::Expression::ConstFloat{value: f} }
           / i:integer { ast::Expression::ConstInt{value: i} }
           / s:symbol { ast::Expression::Symbol(s) }

#[pub]
binop -> ast::BinOp =
      left:base_types spaces op:binop_token spaces right:expression
      { ast::BinOp{left: Box::new(left), right: Box::new(right), op: op} }


#[pub]
binop_token -> BinaryOperator =
        "+" { BinaryOperator::Plus }
      / "*" { BinaryOperator::Mul }
      / "/" { BinaryOperator::Div}
      / "-" { BinaryOperator::Sub}

#[pub]
expression -> ast::Expression =
             f:call { f }
           / binop:binop { ast::Expression::BinOp(binop) }
           / bt:base_types { bt }

#[pub]
statement -> ast::Statement =
       d:declare { ast::Statement::Declaration(d) }
     / f:function { ast::Statement::FunctionDecl(f) }
     / r:return_statement { r }
     / e:expression { ast::Statement::Expr(e) }

#[pub]
statement_list -> ast::Statements =
           s:statement newline stmts:statement_list {
               let mut new_stmts = Vec::new();
               new_stmts.push(Box::new(s));
               new_stmts.extend_from_slice(&stmts);
               new_stmts
           }
           / s:statement newline? {
               let mut new_stmts = Vec::new();
               new_stmts.push(Box::new(s));
               new_stmts
           }

#[pub]
module -> ast::Statements = statement_list